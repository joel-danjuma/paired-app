generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "mongodb"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  room_ads      RoomAd[]
  profile       UserProfile?
  role          UserRole        @default(USER)
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model UserProfile {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  age        Int
  gender     String
  location   String
  interests  String[]
  bio        String
  image      String?
  occupation String
  pets       Boolean
  smoking    Boolean
  single     Boolean
  likes      Int?
  socials    String?
  paired     Boolean  @default(false)
  created_by User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String   @unique @db.ObjectId
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("profile")
}

model RoomAd {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  propertyType  String
  image         String[]
  rent          Int
  bedrooms      Int
  bathrooms     Int
  location      String
  pets          Boolean
  smoking       Boolean
  serviced      Boolean
  serviceCharge Int
  created_by    User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id       String   @db.ObjectId
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@map("rooms")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  credentialID         String  @unique
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// model Waitlist {
//   id    String @id @default(auto()) @map("_id") @db.ObjectId
//   email String @unique(map: "email_1")
// }
